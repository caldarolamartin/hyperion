# Hyperion Config File
#
# Dictionaries:
#
# Measurements  Required for automated scanning
# ActionTypes   Required for automated scanning
# Instruments   Required to load instruments
#


# ----------------------------------------------------------------------------------------------------------------------
# VisualizationGuis:
# ----------------------------------------------------------------------------------------------------------------------
#
# A dictionary of guis used for visualization. If it is included by name in the list under visualization_guis
# in a Measurement, these guis will be passed as input when that gui is created.
# It is possible
#
VisualizationGuis:
  Spectrum:
    view: pyqtgraph/PlotWidget
    plotargs:
      title: Spectrum
  Power:
    view: pyqtgraph/PlotWidget
  Image:
    start_hidden: True
    view: pyqtgraph/ImageView

# ----------------------------------------------------------------------------------------------------------------------
# Measurements:
# ----------------------------------------------------------------------------------------------------------------------
#
# A dictionary of measurements.
# Can contain both "Manual Measurement Guis" and "Automated Measurements"
# For a manual measurement, point to the view file. All gui building and measurement control should be done in that file.
# Each Automated Measurement should contain a key automated_actionlist that holds a list of Actions.
# Each Action is a dictionary which has a mandatory unique key Name and several other keys.
# Actions can be nested by placing a list of Actions under the '~nested key' in an Action. (e.g. for looping)
#
# Name         Mandatory and unique.
#              (Note that capital 'N' causes it to be on top when alphabetized)
# Type         Optional but recommended. Refers to type in ActionTypes list.
#              (Note that capital 'T' causes it to be second when alphabetized)
# _method      Optional. Usually this is set in the ActionType, but if it is specified here it supersedes the one in the
#              ActionType. _method refers to a method in the experiment class.
#              (Note that '_' causes it to be after the Captitals)
# _view        Optional. Usually this is set in the ActionType, but if it is specified here it supersedes the one in the
#              ActionType. _view refers to gui python class.
#              (Note that '_' causes it to be after the Captitals)
# other params Other parameter can be specified as desired. These will mostly be the settings changed by the user.
#              They should start with a lowercase letter.
#              They will supersede a default values in the ActionType of the same name.
# ~nested      If other Actions are to be performed from inside an Action, those can be specified as a list in this key.
#              Typically used when looping.
#              (Note that '~' makes this key always appear last when alphabetized)
#
Measurements:       # dictionary of Measurements
#  Manual Measurement Example:
#    view: hyperion.view.example_instrument_view/ExampleInstrumentGui
#    visualization_guis:
#      out: pyqtgraph/PlotWidget
  Automatic Measurement Example:
#    start_hidden: True
    required_instruments:         # required instruments for this measurement
      Camera:                     # this name should match the name in Instruments
        stop: True                # call stop() method of this instrument gui before starting measurement
        lock: True                # disable this instruments gui while measuring
      Spectrometer:
        stop: True
        lock: True
    view: examples.example_project_with_automated_scanning.gui.measurement_gui/MyMeasurementGuiWithPlotting  #hyperion.view.base_guis/AutoMeasurementGui
    visualization_guis:
      - Spectrum
      - Power
      - Image
    automated_actionlist:
      - Name: Saving
        Type: saver
        basename: datafile.nc
        folder: C:\Temp
      - Name: Initialize
        _method: initialize_example_measurement_A
      - Name: Image Before
        Type: image                               # Used to get some default values
        _method: image_with_filter                # Override the _method of Type with a custom one
        _view: examples.example_project_with_automated_scanning.gui.gui_elements/ImageWithFilters  # Override the _view of Type with a custom one
        exposuretime: 5min
        filter_a: True
        filter_b: False
      - Name: Scan Atto X
        Type: atto_scanner
        _store_name: sample_x
        axis: x
        start: 4 mm
        stop: 1 mm
        step: 1 mm
        ~nested:
          - Name: power
            _method: measure_power
          - Name: Scan Atto Y
            Type: atto_scanner
            _store_name: sample_y
#            _disabled: True
            axis: y
            start: 2 um
            stop: 9 um
            num: 8
            ~nested:
              - Name: Spectrum
                _method: fake_spectrum
          - Name: break_after_scanning_XY
            _method: check_break
      - Name: Finalize
        _method: finalize_example_measurement_A


# ----------------------------------------------------------------------------------------------------------------------
# Action Types:
# ----------------------------------------------------------------------------------------------------------------------
#
# ActionTypes are used to specify 'defaults' for an Action.
# (Multiple Actions could be of the same ActionType)
# 'ActionTypes' is a dictionary. The keys are the names of each ActionType
# Each ActionType is a dictionary itself holding in the dictionary of parameters.
# At the moment of "loading"(?) the Measurement all keys without an underscore (_) are copied to the Action.
# You can interpret keys without an underscore as default values to be loaded into the Action.
# Keys with an underscore are not copied
# Special undercore keys are _method an _ui. _method specifies the name of the method to be called.
# _ui specifies the gui file to load for building the gui of the Measurement.
# Note that if the Action contains a _ui or a _method, those will be used instead of the one in the ActionType.
# Note that an Action does not necessarily have to specify a Type. If no ActionType is specified, the _method has to be
# specified in the Action and if a gui is required _ui has to be specified as well
#
ActionTypes:       # dictionary of ActionTypes
  saver:
    _method: default_saver
    _view: hyperion.view.action_guis/SaverGui
    folder: c:/Temp
    auto_increment: True
  atto_scanner:       # key (this is the name to refer to in an Action inside a Measurement
    _axes:              # key inside the ActionType-dictionary atto_scanner
      - x
      - y
      - z
    _method: sweep_atto # key inside the ActionType-dictionary atto_scanner
    _ui: scanner.ui     # key inside the ActionType-dictionary atto_scanner
#    _view: gui.gui_elements/ScanMicroPositioner
    _view: hyperion.view.action_guis/ScanActuator
    step_min: 1nm
    actuator_units:
      - nm
      - um
      - mm
  histogram:
    _method: histogram
    _view: examples.example_project_with_automated_scanning.gui.gui_elements/ExampleActionGui
    exposuretime: 3
  image:
    _method: image
    _view: examples.example_project_with_automated_scanning.gui.gui_elements/ExampleActionGui
    _ui: image.ui
    exposuretime: 0.1s
    exposuretime_min: 1us
    exposuretime_max: 2hr
  spectrum:
    exposuretime: 2s
    _view: examples.example_project_with_automated_scanning.gui.gui_elements/ExampleActionGui
    _method: spectrum
    _ui: spectrum.ui
  powermeter:
    exposuretime: 1s


# ----------------------------------------------------------------------------------------------------------------------
# Instruments:
# ----------------------------------------------------------------------------------------------------------------------
#
# Dictionary of Instruments
# Each instrument is a dictionary with the the following keys:
#
# instrument          Pointer to the instrument file and class to be used.
#                     For example: hyperion.instrument.example_instrument/ExampleInstrument
# controller          Pointer to the controller file and class to be used.
#                     For example: hyperion.controller.example_controller/ExampleController
# view:               Optional pointer to the view file and class to be used for creating the Instrument GUI.
#                     For example: hyperion.view.simple_gui_examples.example_instrument_gui/ExampleGui
# graphView           Optional pointer to the view file and class to be used for displaying graphs while measuring.
#                     For example: hyperion.view.simple_gui_examples.example_graph_gui/Example_graph
# visualization_guis  Optional. Instead of graphView one can use a gui specified in VisualizationGuis. That allows for
#                     multiple entities (instruments measurements) to plot in the same window.          THIS STILL NEEDS TO BE IMPLEMENTED !!!!!!!!!!!!
#                     When both graphView and visualization_guis is specified graphView will be ignored.
# other params        Other parameter and settings for the instrument.
#
Instruments:       # dictionary of Instruments
#  BeamBlockers:
#    instrument: hyperion.instrument.misc.beam_flags_instr/BeamFlagsInstr
#    controller: hyperion.controller.generic.generic_serial_contr/GenericSerialController
#    view: hyperion.view.misc.beam_flags_gui/BeamFlagsGui
#    dummy: True
#    port: COM8
  PhotoDiode:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
    view: hyperion.view.example_instrument_view/ExampleInstrumentGuiMultiplePlots
#    graphView: hyperion.view.example_instrument_view/ExampleOutputGui
    start_hidden: False  # If False or not included in dict, the gui will show on startup when using in ExpGui
    visualization_guis:
      - Spectrum
      - Power
  Camera:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
    view: hyperion.view.example_instrument_view/ExampleInstrumentGui2D
    visualization_guis:
      - Image
#    graphView: pyqtgraph/ImageView
  Correlator:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
    view: hyperion.view.example_instrument_view/ExampleInstrumentGui
    graphView: pyqtgraph/PlotWidget
    start_hidden: True
    plotargs:
      title: Correlator
  Spectrometer:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  Laser:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  LED:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  Filters:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  HydraHarp:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  AttoScanner:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  MotorObjectiveX:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  MotorObjectiveY:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController
  MotorObjectiveZ:
    instrument: hyperion.instrument.example_instrument/ExampleInstrument
    controller: hyperion.controller.example_controller/ExampleController



# I'm not sure if this is implemented (yet)
#
MetaInstruments:
  SampleXYZ:
    meta_instr: hyperion.instrument.example_meta_instrument/ExampleMetaInstrument
    view: hyperion.view.example_instrument_view/ExampleInstrumentGui
    start_hidden: True
    instruments:
      x: MotorObjectiveX               # This should be the name of an instrument
      y: MotorObjectiveY
      z: MotorObjectiveZ

# This might be obsolete or unused:
#
Data:
  save_folder: C:/Temp/Data
  data_type: txt

# This might be obsolete or unused:
#
User:
  name: Aron

# This might be obsolete or unused:
#
Saving:
  auto: True
  directory:

